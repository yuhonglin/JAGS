
#line 3 "scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer zz_create_buffer
#define yy_delete_buffer zz_delete_buffer
#define yy_flex_debug zz_flex_debug
#define yy_init_buffer zz_init_buffer
#define yy_flush_buffer zz_flush_buffer
#define yy_load_buffer_state zz_load_buffer_state
#define yy_switch_to_buffer zz_switch_to_buffer
#define yyin zzin
#define yyleng zzleng
#define yylex zzlex
#define yylineno zzlineno
#define yyout zzout
#define yyrestart zzrestart
#define yytext zztext
#define yywrap zzwrap
#define yyalloc zzalloc
#define yyrealloc zzrealloc
#define yyfree zzfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE zzrestart(zzin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t zzleng;

extern FILE *zzin, *zzout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up zztext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up zztext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via zzrestart()), so that the user can continue scanning by
	 * just pointing zzin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when zztext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t zzleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow zzwrap()'s to do buffer switches
 * instead of setting up a fresh zzin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void zzrestart (FILE *input_file  );
void zz_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE zz_create_buffer (FILE *file,int size  );
void zz_delete_buffer (YY_BUFFER_STATE b  );
void zz_flush_buffer (YY_BUFFER_STATE b  );
void zzpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void zzpop_buffer_state (void );

static void zzensure_buffer_stack (void );
static void zz_load_buffer_state (void );
static void zz_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER zz_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE zz_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE zz_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE zz_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *zzalloc (yy_size_t  );
void *zzrealloc (void *,yy_size_t  );
void zzfree (void *  );

#define yy_new_buffer zz_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        zzensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            zz_create_buffer(zzin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        zzensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            zz_create_buffer(zzin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *zzin = (FILE *) 0, *zzout = (FILE *) 0;

typedef int yy_state_type;

extern int zzlineno;

int zzlineno = 1;

extern char *zztext;
#define yytext_ptr zztext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up zztext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	zzleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 77
#define YY_END_OF_BUFFER 78
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[263] =
    {   0,
        0,    0,    0,    0,   48,   48,    0,    0,   78,   77,
       51,   54,   77,   77,   77,   39,   40,   43,   36,   74,
       73,   74,   65,   44,   45,   77,   41,   73,   37,   74,
       38,   46,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   53,   74,   73,
       63,   73,   73,   73,   73,   73,   48,   49,   56,   57,
       51,    0,   75,    0,   52,    0,   76,   74,   74,   65,
       73,   73,   62,   47,   60,   74,   42,   73,   13,   32,
       73,   73,   73,   73,   73,   73,   73,    3,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,    4,   73,   73,   73,   53,   63,   73,   64,   67,
       73,   73,    0,   71,   73,   73,   48,   49,   49,   50,
       56,   62,   73,   60,   74,    0,   74,   73,   73,   73,
       73,   73,   73,   31,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   33,   22,   34,   73,   73,   17,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       74,    0,   73,    0,   74,   58,   58,   73,   73,   73,
       26,   73,    2,   30,   73,   73,   35,   28,   73,   73,
       73,   73,   73,   25,   27,   73,   19,   16,   73,   73,
       66,   68,   73,   73,   73,   74,   61,   61,   59,   59,

       12,   10,   18,   73,   73,   73,    5,    1,   73,   73,
       73,   73,   73,   73,   73,   73,    0,   70,   73,   61,
       73,   73,   73,   73,   73,   73,   73,   55,   29,   11,
       73,   73,    7,   73,   23,   73,   14,    8,   73,   20,
       73,   73,   73,   73,   15,   73,   21,   73,   73,   24,
       73,   73,   73,   73,    9,    6,   73,    0,   69,    0,
       72,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,    1,    1,    1,   21,   22,   22,   23,   24,   22,
       22,   22,   22,   22,   22,   25,   22,   26,   22,   22,
       22,   22,   22,   22,   27,   22,   22,   22,   22,   22,
       28,   29,   30,    1,   29,   31,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   22,   22,   41,   42,   43,
       44,   45,   22,   46,   47,   48,   49,   22,   50,   51,
       52,   53,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        1,    1,    4,    4,    4,    4,    1,    1,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    1,    4,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[274] =
    {   0,
        0,    0,   51,   96,  298,  294,  298,  288,  282, 1126,
       53, 1126,  274,  275,  269, 1126, 1126, 1126, 1126,   42,
       46,  265,   52, 1126, 1126,  241, 1126,   57, 1126,    0,
     1126, 1126,   65,   74,  131,   89,   98,  104,  119,  115,
      130,  142,  150,  149,  169,  168,  183,  246,   55,  216,
      219,  221,  212,   89,  222,   90,    0,   64,    0, 1126,
       80,  236, 1126,  237, 1126,  223, 1126,    0,  207,  137,
        0,  163,  222, 1126,  236,   82, 1126,  232,  233,  235,
      238,  241,  253,  264,  267,  266,  273,  288,  290,  291,
      306,  313,  320,  321,  332,  339,  346,  343,  357,  360,

      362,  365,  379,  381,  391,  213,  420,  398,    0,  408,
      416,  426,   99, 1126,  427,  427,    0,  130,  142, 1126,
        0,  448,   95,  453,  112,  198,  190,  446,  456,  449,
      451,  470,  473,  475,  478,  480,  481,  488,  500,  502,
      511,  510,  513,  516,  521,  524,  534,  536,  546,  553,
      557,  564,  566,  569,  567,  585,  598,  588,  590,  599,
      128,  181,  171,  164,  163,  162,  152,  593,  617,  620,
      607,  622,  625,  631,  641,  649,  656,  663,  664,  674,
      677,  679,  679,  689,  697,  703,  708,  710,  711,  713,
      716,  718,  735,  767,  740,  151,  147,  115,  108,  100,

      741,  748,  749,  763,  770,  758,  776,  781,  786,  796,
      786,  800,  809,  814,  811,  814,  156, 1126,  824,   99,
      832,  833,  847,  848,  858,  864,  871,  872,  874,  877,
      879,  896,  882,  901,  903,  906,  920,  911,  925,  928,
      933,  938,  946,  947,  955,  956,  965,  973,  974,  979,
      980,  982,  987, 1034, 1005, 1008, 1041,  194, 1126,  217,
     1126, 1126, 1093, 1097, 1101, 1105, 1109,   92,   59, 1113,
     1117, 1121,   56
    } ;

static yyconst flex_int16_t yy_def[274] =
    {   0,
      262,    1,    1,    1,  263,  263,  264,  264,  262,  262,
      262,  262,  265,  266,  267,  262,  262,  262,  262,  268,
      269,  268,  268,  262,  262,  262,  262,  269,  262,  268,
      262,  262,  269,  269,  269,  269,  269,  269,  269,   35,
       35,   35,   35,   35,   35,   35,   35,  262,  268,  269,
      268,  269,   35,   35,   35,   45,  270,  271,  272,  262,
      262,  265,  262,  266,  262,  267,  262,  268,  268,  268,
      273,   45,  273,  262,  268,  268,  262,   45,   45,   45,
       45,   45,   35,   45,   45,   45,   45,   45,   45,   45,
       35,   35,   35,   35,   35,   35,   35,   45,   45,   45,

       45,   45,   45,   35,   35,  262,  268,   35,  268,   35,
       35,   35,  262,  262,   35,   45,  270,  271,  271,  262,
      272,  268,  273,  268,  268,  262,  268,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   35,   45,
       45,   45,   45,   45,   45,   45,   45,   35,   35,   35,
       45,   45,   45,   35,   45,   45,   45,   45,   45,   45,
      268,  262,  273,  262,  268,  262,  268,   45,   45,   45,
       45,   45,   45,   45,   35,   35,   35,   35,   35,   45,
       45,   45,   35,   35,   35,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,  268,  262,  273,  262,  268,

       45,   45,   45,   35,   35,   45,   45,   45,   35,   35,
       45,   45,   45,   35,   45,   45,  262,  262,   45,  268,
       45,   45,   35,   35,   35,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,  262,  262,  262,
      262,    0,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262
    } ;

static yyconst flex_int16_t yy_nxt[1180] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   18,
       10,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   28,   28,   28,   28,   28,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   28,   28,   39,
       40,   41,   42,   28,   43,   44,   45,   46,   47,   28,
       28,   28,   28,   48,   61,   69,   61,   70,   71,   71,
       71,   73,   72,   49,   50,   75,   51,   70,   69,   71,
      107,   71,   71,  119,   71,   76,   52,   71,  120,   71,
       71,   61,   53,   61,   54,   71,   71,   76,   71,   71,
      113,   55,  126,   71,  127,   68,  114,   56,   48,   78,

      113,   71,   71,   71,   71,  162,  114,  163,   49,   50,
       71,   51,   71,   71,  220,  200,   71,   71,   71,   71,
       84,   52,  164,  199,  165,   79,   71,   53,   85,   54,
      198,   71,   71,   71,   71,   87,   55,  116,  162,  262,
      196,   72,   56,   71,  262,   71,   71,   71,   86,   72,
       75,  119,   70,   72,   89,   72,  120,  217,   90,   71,
       76,   88,  197,  218,   72,   80,  220,  167,   72,   81,
       72,   82,   76,   91,   83,   92,   72,  166,  200,  199,
       72,   93,   72,   72,   72,   72,  198,   72,   72,   72,
       72,   95,   72,   72,   72,  258,  197,   96,   72,   94,

       97,  259,   72,   72,   98,  167,  101,   72,   72,   72,
       72,  102,   72,  166,   72,  106,   99,   72,  260,  103,
      100,   72,  122,   72,  261,  104,   72,  105,   71,   67,
       71,   73,   75,   71,  107,   71,   71,   73,  108,   65,
       63,  110,   76,  109,   71,  123,   78,  111,  106,   71,
       72,  124,   72,   77,   76,   72,   72,  123,  112,  125,
       72,  115,   72,  128,   72,   90,   72,   72,   72,  129,
       72,  125,   72,   72,   74,   67,  130,   65,   63,   72,
       72,  262,   72,   72,   72,   72,   72,  131,   72,   72,
       60,   72,   72,   72,  132,   72,   72,   72,   72,   72,

       60,   72,   72,   58,   72,  135,  136,   58,   72,  262,
      262,  133,  134,   72,   72,   72,  262,   72,   72,   72,
       72,   72,  139,   72,   72,   72,   72,  137,  262,  262,
      262,  262,  262,  262,  262,   72,  138,   72,   72,   72,
      140,   72,   72,  262,   72,  262,   72,   72,  141,   72,
      262,  142,  262,   72,   72,  144,   72,  262,   72,   72,
       72,   72,  262,   72,   72,  143,   72,  262,  262,  145,
       72,  262,   72,   72,   72,   72,  262,   72,  148,   72,
       72,  146,   72,  262,   72,  262,   72,  147,   72,   72,
      149,   72,  150,   72,   72,   72,   72,   72,  262,  262,

       72,  152,  262,  262,   72,  262,  151,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,  262,  262,   72,
      262,  154,  262,  153,   72,  155,   72,  262,  262,   72,
       72,   72,   72,   75,   72,  107,   72,  156,   72,  158,
      157,   72,   72,   76,  109,  262,   72,  262,   72,  262,
       72,   72,  262,  262,   72,   76,   72,  262,   72,   72,
       72,   72,  150,  122,   72,   72,   72,   72,  124,   72,
       72,  161,  160,  159,   72,  262,  125,   72,   72,  262,
      170,   72,  171,  161,   72,  262,   72,   72,  125,  262,
      168,   72,  262,   72,  262,  169,   72,   72,   72,  262,

       72,   72,   72,   72,  173,   72,   72,   72,   72,   72,
       72,   72,   72,   72,  172,   72,   72,   72,  262,   72,
       72,   72,   72,   72,   72,  174,   72,  175,  176,   72,
      262,   72,   72,   72,  178,  177,  262,  179,   72,   72,
       72,  181,   72,   72,  182,   72,   72,   72,   72,   72,
      180,   72,   72,   72,  262,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,  262,   72,   72,   72,
      184,   72,   72,  262,   72,   72,   72,  262,  183,   72,
       72,   72,  262,  262,   72,   72,   72,   72,   72,   72,
      262,   72,   72,   72,  185,   72,   72,   72,  190,   72,

      262,  188,   72,   72,  186,  262,  187,   72,   72,   72,
      262,   72,  189,   72,   72,   72,   72,   72,   72,   72,
       72,   72,  192,   72,   72,   72,  191,  193,   72,   72,
       72,  262,   72,   72,   72,   72,   72,  194,   72,   72,
      201,   72,   72,  262,   72,   72,   72,  195,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,  202,
       72,  204,   72,  262,   72,  203,   72,   72,   72,   72,
      262,   72,   72,   72,  262,   72,   72,  262,   72,   72,
      262,   72,   72,   72,  205,  262,  262,   72,  206,   72,
       72,  262,   72,  262,   72,  207,   72,   72,   72,   72,

      262,   72,   72,   72,  208,   72,   72,   72,   72,   72,
       72,  262,   72,   72,   72,  262,  210,   72,  262,  212,
      211,  209,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,  262,   72,   72,  262,   72,  213,   72,
       72,   72,  214,   72,   72,   72,   72,   72,   72,   72,
       72,   72,  262,   72,   72,   72,  262,   72,   72,   72,
      215,   72,   72,   72,   72,   72,   72,   72,  217,   72,
       72,   72,   72,  219,  218,   72,   72,  216,  262,   72,
       72,  262,   72,   72,   72,  262,   72,   72,   72,  223,
      262,   72,   72,   72,  262,   72,   72,   72,   72,   72,

       72,   72,   72,  221,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,  222,   72,   72,   72,  262,
       72,  226,  262,   72,   72,  262,   72,   72,   72,  224,
       72,   72,   72,   72,   72,  227,   72,   72,  225,   72,
       72,  262,   72,  262,   72,   72,  230,   72,  229,   72,
      228,   72,   72,  262,   72,   72,   72,   72,   72,   72,
       72,  231,   72,   72,   72,   72,  262,  233,   72,  262,
      262,  232,  234,  262,  262,   72,  262,  262,  262,   72,
       72,   72,   72,   72,  235,   72,   72,  236,   72,  262,
       72,   72,   72,  237,  262,   72,   72,  262,   72,   72,

      262,   72,   72,   72,  238,   72,   72,   72,   72,   72,
       72,  239,   72,   72,  241,   72,  240,   72,   72,   72,
      262,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,  262,  243,   72,   72,  262,
      262,   72,   72,   72,  242,  244,   72,   72,   72,  262,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
      246,  262,   72,   72,   72,  262,  245,   72,   72,   72,
      248,   72,   72,   72,  247,   72,   72,   72,   72,   72,
       72,   72,   72,  249,   72,   72,   72,   72,  262,   72,
       72,   72,  250,   72,   72,  262,   72,   72,   72,  251,

       72,  252,   72,   72,   72,   72,   72,   72,  253,  254,
       72,   72,   72,   72,   72,  255,   72,   72,   72,  262,
       72,   72,   72,  262,   72,   72,   72,   72,  256,   72,
       72,   72,  257,   72,   72,  258,   72,  262,   72,   72,
       72,  259,  260,   72,  262,  262,  262,  262,  261,  262,
      262,  262,   72,  262,  262,   72,   72,  262,  262,   72,
      262,  262,  262,  262,  262,   72,  262,  262,  262,   72,
      262,  262,   72,  262,  262,  262,   72,  262,  262,  262,
      262,   72,  262,  262,  262,   72,  262,  262,   72,  262,
      262,  262,   72,   57,   57,   57,   57,   59,   59,   59,

       59,   62,   62,   62,   62,   64,   64,   64,   64,   66,
       66,   66,   66,  117,  117,  262,  117,  118,  118,  118,
      118,  121,  262,  121,  121,    9,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262
    } ;

static yyconst flex_int16_t yy_chk[1180] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,   11,   20,   11,   20,   21,  273,
       21,   21,  269,    3,    3,   23,    3,   23,   49,   28,
       49,   28,   28,   58,   21,   23,    3,   33,   58,   33,
       33,   61,    3,   61,    3,   28,   34,   23,   34,   34,
       54,    3,   76,   33,   76,  268,   54,    3,    4,   33,

      113,   36,   34,   36,   36,  123,  113,  123,    4,    4,
       37,    4,   37,   37,  220,  200,   38,   36,   38,   38,
       36,    4,  125,  199,  125,   34,   37,    4,   36,    4,
      198,   39,   38,   39,   39,   38,    4,   56,  161,  118,
      161,   56,    4,   35,  118,   35,   35,   39,   37,   40,
       70,  119,   70,   40,   40,   40,  119,  217,   40,   35,
       70,   39,  197,  217,   41,   35,  196,  167,   41,   35,
       41,   35,   70,   41,   35,   42,   42,  166,  165,  164,
       42,   43,   42,   44,   43,   42,  163,   44,   43,   44,
       43,   44,   44,   43,   72,  258,  162,   44,   72,   43,

       45,  258,   46,   45,   45,  127,   46,   45,   46,   45,
       72,   46,   45,  126,   72,  106,   45,   47,  260,   46,
       45,   47,   69,   47,  260,   47,   47,   47,   50,   66,
       50,   50,   51,   52,   51,   52,   52,   73,   50,   64,
       62,   52,   51,   51,   50,   73,   53,   52,   48,   52,
       53,   75,   53,   26,   51,   53,   55,   73,   53,   75,
       55,   55,   55,   78,   79,   55,   80,   78,   79,   81,
       80,   75,   82,   81,   22,   15,   82,   14,   13,   78,
       79,    9,   80,   78,   79,   81,   80,   83,   82,   81,
        8,   83,   82,   83,   83,   84,   83,   86,   85,   84,

        7,   86,   85,    6,   87,   86,   87,    5,   87,    0,
        0,   84,   85,   86,   85,   84,    0,   86,   85,   88,
       87,   89,   90,   88,   87,   89,   90,   88,    0,    0,
        0,    0,    0,    0,    0,   88,   89,   89,   90,   88,
       91,   89,   90,    0,   91,    0,   91,   92,   91,   91,
        0,   92,    0,   92,   93,   94,   92,    0,   93,   94,
       93,   94,    0,   93,   94,   93,   95,    0,    0,   95,
       95,    0,   95,   96,   98,   95,    0,   96,   98,   96,
       97,   96,   96,    0,   97,    0,   97,   97,   99,   97,
       98,  100,   99,  101,   98,  100,  102,  101,    0,    0,

      102,  101,    0,    0,   99,    0,  100,  100,   99,  101,
      103,  100,  102,  101,  103,  104,  102,    0,    0,  104,
        0,  104,    0,  103,  104,  105,  103,    0,    0,  105,
      103,  105,  108,  107,  105,  107,  108,  108,  108,  112,
      111,  108,  110,  107,  107,    0,  110,    0,  110,    0,
      111,  110,    0,    0,  111,  107,  111,    0,  116,  111,
      112,  115,  116,  122,  112,  115,  112,  115,  124,  112,
      115,  122,  116,  115,  116,    0,  124,  128,  116,    0,
      130,  128,  131,  122,  130,    0,  131,  129,  124,    0,
      128,  129,    0,  128,    0,  129,  130,  128,  131,    0,

      130,  132,  131,  129,  133,  132,  134,  129,  133,  135,
      134,  136,  137,  135,  132,  136,  137,  132,    0,  138,
      133,  132,  134,  138,  133,  135,  134,  136,  137,  135,
        0,  136,  137,  140,  139,  138,    0,  140,  139,  138,
      139,  142,  141,  139,  143,  142,  141,  144,  143,  140,
      141,  144,  145,  140,    0,  146,  145,  142,  141,  146,
      143,  142,  141,  144,  143,  147,    0,  144,  145,  147,
      148,  146,  145,    0,  148,  146,  148,    0,  147,  148,
      149,  147,    0,    0,  149,  147,  149,  150,  151,  149,
        0,  150,  151,  150,  150,  152,  150,  153,  155,  152,

        0,  153,  155,  154,  151,    0,  152,  154,  151,  154,
        0,  152,  154,  153,  155,  152,  156,  153,  155,  158,
      156,  159,  157,  158,  168,  159,  156,  158,  168,  157,
      160,    0,  156,  157,  160,  158,  156,  159,  171,  158,
      168,  159,  171,    0,  168,  157,  160,  160,  169,  157,
      160,  170,  169,  172,  171,  170,  173,  172,  171,  169,
      173,  172,  174,    0,  169,  170,  174,  170,  169,  172,
        0,  170,  173,  172,    0,  175,  173,    0,  174,  175,
        0,  175,  174,  176,  175,    0,    0,  176,  176,  176,
      177,    0,  176,    0,  177,  176,  177,  178,  179,  177,

        0,  178,  179,  178,  179,  180,  178,  179,  181,  180,
      182,    0,  181,  183,  182,    0,  181,  183,    0,  183,
      182,  180,  183,  184,  181,  180,  182,  184,  181,  184,
      182,  185,  184,    0,  186,  185,    0,  185,  186,  187,
      185,  188,  189,  187,  190,  188,  189,  191,  190,  192,
      186,  191,    0,  192,  186,  187,    0,  188,  189,  187,
      190,  188,  189,  191,  190,  192,  193,  191,  194,  192,
      193,  195,  201,  195,  194,  195,  201,  193,    0,  202,
      203,    0,  193,  202,  203,    0,  193,  195,  201,  206,
        0,  195,  201,  206,    0,  202,  203,  204,  194,  202,

      203,  204,  194,  204,  205,  206,  204,  207,  205,  206,
      205,  207,  208,  205,  194,  205,  208,  211,  194,    0,
      209,  211,    0,  207,  209,    0,  209,  207,  208,  209,
      210,  212,  208,  211,  210,  212,  210,  211,  210,  210,
      213,    0,  215,    0,  213,  216,  215,  212,  214,  216,
      213,  212,  214,    0,  214,  219,  213,  214,  215,  219,
      213,  216,  215,  221,  222,  216,    0,  221,  222,    0,
        0,  219,  222,    0,    0,  219,    0,    0,    0,  221,
      222,  223,  224,  221,  222,  223,  224,  223,  224,    0,
      223,  224,  225,  224,    0,  226,  225,    0,  225,  226,

        0,  225,  227,  228,  225,  229,  227,  228,  230,  229,
      231,  226,  230,  233,  231,  226,  227,  233,  227,  228,
        0,  229,  227,  228,  230,  229,  231,  232,  230,  233,
      231,  232,  234,  233,  235,    0,  234,  236,  235,    0,
        0,  236,  238,  232,  232,  236,  238,  232,  234,    0,
      235,  237,  234,  236,  235,  237,  239,  236,  238,  240,
      239,    0,  238,  240,  241,    0,  237,  237,  241,  242,
      241,  237,  239,  242,  240,  240,  239,  243,  244,  240,
      241,  243,  244,  242,  241,  242,  245,  246,    0,  242,
      245,  246,  243,  243,  244,    0,  247,  243,  244,  244,

      247,  246,  245,  246,  248,  249,  245,  246,  248,  249,
      250,  251,  247,  252,  250,  251,  247,  252,  253,    0,
      248,  249,  253,    0,  248,  249,  250,  251,  252,  252,
      250,  251,  253,  252,  253,  254,  255,    0,  253,  256,
      255,  254,  257,  256,    0,    0,    0,    0,  257,    0,
        0,    0,  255,    0,    0,  256,  255,    0,    0,  256,
        0,    0,    0,    0,    0,  254,    0,    0,    0,  254,
        0,    0,  257,    0,    0,    0,  257,    0,    0,    0,
        0,  254,    0,    0,    0,  254,    0,    0,  257,    0,
        0,    0,  257,  263,  263,  263,  263,  264,  264,  264,

      264,  265,  265,  265,  265,  266,  266,  266,  266,  267,
      267,  267,  267,  270,  270,    0,  270,  271,  271,  271,
      271,  272,    0,  272,  272,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int zz_flex_debug;
int zz_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *zztext;
#line 1 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* -*-C++-*- */
#line 3 "../../../../../jags-4_patched/src/terminal/scanner.ll"
#include <iostream>
#include <string>
#include <cstring>
#include <compiler/ParseTree.h>
#include "parser.hh"

    std::vector<FILE*> file_stack;
    int command_buffer_count = 0;
    int buffer_count = 0;
    void return_to_main_buffer();
    void close_buffer();
    std::string ExpandFileName(char const *name);



#line 833 "scanner.cc"

#define INITIAL 0
#define RDATA 1
#define COMMENT 2
#define SYSTEM 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int zzlex_destroy (void );

int zzget_debug (void );

void zzset_debug (int debug_flag  );

YY_EXTRA_TYPE zzget_extra (void );

void zzset_extra (YY_EXTRA_TYPE user_defined  );

FILE *zzget_in (void );

void zzset_in  (FILE * in_str  );

FILE *zzget_out (void );

void zzset_out  (FILE * out_str  );

yy_size_t zzget_leng (void );

char *zzget_text (void );

int zzget_lineno (void );

void zzset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int zzwrap (void );
#else
extern int zzwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( zztext, zzleng, 1, zzout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( zzin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( zzin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, zzin))==0 && ferror(zzin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(zzin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int zzlex (void);

#define YY_DECL int zzlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after zztext and zzleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "../../../../../jags-4_patched/src/terminal/scanner.ll"


#line 1021 "scanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! zzin )
			zzin = stdin;

		if ( ! zzout )
			zzout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			zzensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				zz_create_buffer(zzin,YY_BUF_SIZE );
		}

		zz_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of zztext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 263 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1126 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 28 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=MODEL; return MODEL;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=DATA; return DATA;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=IN; return IN;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=TO; return TO;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=INITS; return INITS;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=PARAMETERS; return PARAMETERS;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 35 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=COMPILE; return COMPILE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 36 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=NCHAINS; return NCHAINS;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 37 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=INITIALIZE; return INITIALIZE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=CHAIN; return CHAIN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 40 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=UPDATE; return UPDATE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 41 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=ADAPT; return ADAPT;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=BY; return BY;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 44 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=MONITOR; return MONITOR;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 45 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=MONITORS; return MONITORS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 46 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=TYPE; return TYPE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 47 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=SET; return SET;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 48 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=CLEAR; return CLEAR;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 49 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=THIN; return THIN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 50 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=SAMPLER; return SAMPLER;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 51 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=SAMPLERS; return SAMPLERS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 52 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=RNGTOK; return RNGTOK;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 53 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=FACTORY; return FACTORY;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 54 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=FACTORIES; return FACTORIES;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 55 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=SEED; return SEED;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 57 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=CODA; return CODA;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 58 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=STEM; return STEM;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 60 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=LOAD; return LOAD;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 61 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=UNLOAD; return UNLOAD;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 62 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=EXIT; return EXIT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 64 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=DIRECTORY; return DIRECTORY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 65 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=CD; return CD;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 66 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=PWD; return PWD;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 67 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=RUN; return RUN;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 69 "../../../../../jags-4_patched/src/terminal/scanner.ll"
zzlval.intval=LIST; return LIST;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 71 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ',';
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 72 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return '[';
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 73 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ']';
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 74 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return '(';
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 75 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ')';
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 76 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return '=';
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 77 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ARROW;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 78 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return '*';
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 79 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ':';
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 80 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ';';
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 81 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return '`';
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 83 "../../../../../jags-4_patched/src/terminal/scanner.ll"
BEGIN(COMMENT);
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 84 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* Eat up anything that's not a '*' */
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 85 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* Eat up '*'s not followed by a '/'  */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 86 "../../../../../jags-4_patched/src/terminal/scanner.ll"
BEGIN(INITIAL);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 88 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* Eat whitespace */
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 89 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* Eat single-line comments */
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 90 "../../../../../jags-4_patched/src/terminal/scanner.ll"
/* Eat newlines */
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 91 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ENDCMD;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 93 "../../../../../jags-4_patched/src/terminal/scanner.ll"
BEGIN(SYSTEM);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 94 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.stringptr = new std::string(zztext);
  return SYSCMD;
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 98 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
    BEGIN(INITIAL); return ENDCMD;
 }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 102 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 108 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 111 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 120 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.val = atof(zztext); return DOUBLE;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 123 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.intval = atoi(zztext); return INT;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return DIM;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return NA;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return R_NULL;
	YY_BREAK
case 69:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 130 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return STRUCTURE;
	YY_BREAK
case 70:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 131 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return LIST;
	YY_BREAK
case 71:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 132 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return 'c';
	YY_BREAK
case 72:
*yy_cp = (yy_hold_char); /* undo effects of setting up zztext */
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up zztext again */
YY_RULE_SETUP
#line 133 "../../../../../jags-4_patched/src/terminal/scanner.ll"
return ASINTEGER;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 135 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{ 
  zzlval.stringptr = new std::string(zztext);
  return NAME;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 140 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  // More general than NAME which is limited to syntactically valid BUGS names
  zzlval.stringptr = new std::string(zztext);
  return STRING;
}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 146 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
  zzlval.stringptr = new std::string(zztext);
  // Remove enclosing quotes
  zzlval.stringptr->erase(zzlval.stringptr->size() - 1, 1);
  zzlval.stringptr->erase(0, 1);
  return STRING;
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 154 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
    zzlval.stringptr = new std::string(zztext);
    zzlval.stringptr->erase(zzlval.stringptr->size() - 1, 1);
    zzlval.stringptr->erase(0,1);
    return STRING;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 161 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
    if (command_buffer_count) {
	close_buffer();
	--command_buffer_count;
    }
    else {
	yyterminate();
    }
    return ENDSCRIPT;
}
	YY_BREAK
case YY_STATE_EOF(RDATA):
#line 171 "../../../../../jags-4_patched/src/terminal/scanner.ll"
{
    close_buffer();
    BEGIN(INITIAL);
    return ENDDATA;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 176 "../../../../../jags-4_patched/src/terminal/scanner.ll"
ECHO;
	YY_BREAK
#line 1569 "scanner.cc"
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(SYSTEM):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed zzin at a new source and called
			 * zzlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = zzin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( zzwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * zztext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of zzlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					zzrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			zzrestart(zzin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) zzrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 263 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 263 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 262);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up zztext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					zzrestart(zzin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( zzwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve zztext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void zzrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        zzensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            zz_create_buffer(zzin,YY_BUF_SIZE );
	}

	zz_init_buffer(YY_CURRENT_BUFFER,input_file );
	zz_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void zz_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		zzpop_buffer_state();
	 *		zzpush_buffer_state(new_buffer);
     */
	zzensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	zz_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (zzwrap()) processing, but the only time this flag
	 * is looked at is after zzwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void zz_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	zzin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE zz_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) zzalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in zz_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) zzalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in zz_create_buffer()" );

	b->yy_is_our_buffer = 1;

	zz_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with zz_create_buffer()
 * 
 */
    void zz_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		zzfree((void *) b->yy_ch_buf  );

	zzfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a zzrestart() or at EOF.
 */
    static void zz_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	zz_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then zz_init_buffer was _probably_
     * called from zzrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void zz_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		zz_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void zzpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	zzensure_buffer_stack();

	/* This block is copied from zz_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from zz_switch_to_buffer. */
	zz_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void zzpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	zz_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		zz_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void zzensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)zzalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in zzensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)zzrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in zzensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE zz_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) zzalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in zz_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	zz_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to zzlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       zz_scan_bytes() instead.
 */
YY_BUFFER_STATE zz_scan_string (yyconst char * yystr )
{
    
	return zz_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to zzlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE zz_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) zzalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in zz_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = zz_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in zz_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up zztext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		zztext[zzleng] = (yy_hold_char); \
		(yy_c_buf_p) = zztext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		zzleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int zzget_lineno  (void)
{
        
    return zzlineno;
}

/** Get the input stream.
 * 
 */
FILE *zzget_in  (void)
{
        return zzin;
}

/** Get the output stream.
 * 
 */
FILE *zzget_out  (void)
{
        return zzout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t zzget_leng  (void)
{
        return zzleng;
}

/** Get the current token.
 * 
 */

char *zzget_text  (void)
{
        return zztext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void zzset_lineno (int  line_number )
{
    
    zzlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see zz_switch_to_buffer
 */
void zzset_in (FILE *  in_str )
{
        zzin = in_str ;
}

void zzset_out (FILE *  out_str )
{
        zzout = out_str ;
}

int zzget_debug  (void)
{
        return zz_flex_debug;
}

void zzset_debug (int  bdebug )
{
        zz_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from zzlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    zzin = stdin;
    zzout = stdout;
#else
    zzin = (FILE *) 0;
    zzout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * zzlex_init()
     */
    return 0;
}

/* zzlex_destroy is for both reentrant and non-reentrant scanners. */
int zzlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		zz_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		zzpop_buffer_state();
	}

	/* Destroy the stack itself. */
	zzfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * zzlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *zzalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *zzrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void zzfree (void * ptr )
{
	free( (char *) ptr );	/* see zzrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 176 "../../../../../jags-4_patched/src/terminal/scanner.ll"



int zzwrap()
{
  return 1;
}

void push_file(FILE *file) {
    file_stack.push_back(file);
}

void pop_file() {
    if (file_stack.empty())
        return;

    fclose(file_stack.back());
    file_stack.pop_back();
}


bool open_data_buffer(std::string const *name) {
    FILE *file = fopen(ExpandFileName(name->c_str()).c_str(),"r");
    if (file) {
	zzpush_buffer_state(zz_create_buffer(file, YY_BUF_SIZE));
	push_file(file);
        ++buffer_count;
	BEGIN(RDATA);
	return true;
    }
    else {
	return false;
    }
}

void close_buffer() {
    zzpop_buffer_state();
    pop_file();
    --buffer_count;
}
    
bool open_command_buffer(std::string const *name) {
    FILE *file = fopen(name->c_str(),"r");
    if (file) {
	file_stack.push_back(file);
	zzpush_buffer_state(zz_create_buffer(file, YY_BUF_SIZE ));
	++command_buffer_count;
        ++buffer_count;
	return true;
    }
    else {
	return false;
    }
}

void return_to_main_buffer() {
    /* Clear all buffers in the stack and return to the first */
    while(buffer_count) {
	zzpop_buffer_state();
	--buffer_count;
    }
    command_buffer_count = 0;
    BEGIN(INITIAL);
}


